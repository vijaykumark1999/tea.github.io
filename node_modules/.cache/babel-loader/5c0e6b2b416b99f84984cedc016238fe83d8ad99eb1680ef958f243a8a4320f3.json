{"ast":null,"code":"import _slicedToArray from \"G:/shaankichai/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport $73SJx$react, { useContext as $73SJx$useContext, useState as $73SJx$useState, useMemo as $73SJx$useMemo, useLayoutEffect as $73SJx$useLayoutEffect, useRef as $73SJx$useRef } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nvar $b5e257d569688ac6$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nvar $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/(0, $73SJx$react).createContext($b5e257d569688ac6$var$defaultContext);\nvar $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/(0, $73SJx$react).createContext(false);\n// This is only used in React < 18.\nfunction $b5e257d569688ac6$var$LegacySSRProvider(props) {\n  var cur = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext);\n  var counter = $b5e257d569688ac6$var$useCounter(cur === $b5e257d569688ac6$var$defaultContext);\n  var _ref = (0, $73SJx$useState)(true),\n    _ref2 = _slicedToArray(_ref, 2),\n    isSSR = _ref2[0],\n    setIsSSR = _ref2[1];\n  var value = (0, $73SJx$useMemo)(function () {\n    return {\n      // If this is the first SSRProvider, start with an empty string prefix, otherwise\n      // append and increment the counter.\n      prefix: cur === $b5e257d569688ac6$var$defaultContext ? \"\" : \"\".concat(cur.prefix, \"-\").concat(counter),\n      current: 0\n    };\n  }, [cur, counter]);\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof document !== \"undefined\")\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $73SJx$useLayoutEffect)(function () {\n      setIsSSR(false);\n    }, []);\n  return /*#__PURE__*/(0, $73SJx$react).createElement($b5e257d569688ac6$var$SSRContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $73SJx$react).createElement($b5e257d569688ac6$var$IsSSRContext.Provider, {\n    value: isSSR\n  }, props.children));\n}\nvar $b5e257d569688ac6$var$warnedAboutSSRProvider = false;\nfunction $b5e257d569688ac6$export$9f8ac96af4b1b2ae(props) {\n  if (typeof (0, $73SJx$react)[\"useId\"] === \"function\") {\n    if (process.env.NODE_ENV !== \"test\" && !$b5e257d569688ac6$var$warnedAboutSSRProvider) {\n      console.warn(\"In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.\");\n      $b5e257d569688ac6$var$warnedAboutSSRProvider = true;\n    }\n    return /*#__PURE__*/(0, $73SJx$react).createElement((0, $73SJx$react).Fragment, null, props.children);\n  }\n  return /*#__PURE__*/(0, $73SJx$react).createElement($b5e257d569688ac6$var$LegacySSRProvider, props);\n}\nvar $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\nvar $b5e257d569688ac6$var$componentIds = new WeakMap();\nfunction $b5e257d569688ac6$var$useCounter() {\n  var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var ctx = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext);\n  var ref = (0, $73SJx$useRef)(null);\n  // eslint-disable-next-line rulesdir/pure-render\n  if (ref.current === null && !isDisabled) {\n    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    var currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $73SJx$react).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n    if (currentOwner) {\n      var prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);\n      if (prevComponentValue == null)\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        $b5e257d569688ac6$var$componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        $b5e257d569688ac6$var$componentIds.delete(currentOwner);\n      }\n    }\n    // eslint-disable-next-line rulesdir/pure-render\n    ref.current = ++ctx.current;\n  }\n  // eslint-disable-next-line rulesdir/pure-render\n  return ref.current;\n}\nfunction $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {\n  var ctx = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext);\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n  var counter = $b5e257d569688ac6$var$useCounter(!!defaultId);\n  var prefix = ctx === $b5e257d569688ac6$var$defaultContext && process.env.NODE_ENV === \"test\" ? \"react-aria\" : \"react-aria\".concat(ctx.prefix);\n  return defaultId || \"\".concat(prefix, \"-\").concat(counter);\n}\nfunction $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {\n  // @ts-ignore\n  var id = (0, $73SJx$react).useId();\n  var _ref3 = (0, $73SJx$useState)($b5e257d569688ac6$export$535bd6ca7f90a273()),\n    _ref4 = _slicedToArray(_ref3, 1),\n    didSSR = _ref4[0];\n  var prefix = didSSR || process.env.NODE_ENV === \"test\" ? \"react-aria\" : \"react-aria\".concat($b5e257d569688ac6$var$defaultContext.prefix);\n  return defaultId || \"\".concat(prefix, \"-\").concat(id);\n}\nvar $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, $73SJx$react)[\"useId\"] === \"function\" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;\nfunction $b5e257d569688ac6$var$getSnapshot() {\n  return false;\n}\nfunction $b5e257d569688ac6$var$getServerSnapshot() {\n  return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction $b5e257d569688ac6$var$subscribe(onStoreChange) {\n  // noop\n  return function () {};\n}\nfunction $b5e257d569688ac6$export$535bd6ca7f90a273() {\n  // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n  if (typeof (0, $73SJx$react)[\"useSyncExternalStore\"] === \"function\") return (0, $73SJx$react)[\"useSyncExternalStore\"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (0, $73SJx$useContext)($b5e257d569688ac6$var$IsSSRContext);\n}\nexport { $b5e257d569688ac6$export$9f8ac96af4b1b2ae as SSRProvider, $b5e257d569688ac6$export$619500959fc48b26 as useSSRSafeId, $b5e257d569688ac6$export$535bd6ca7f90a273 as useIsSSR };","map":{"version":3,"names":["$b5e257d569688ac6$var$defaultContext","prefix","String","Math","round","random","current","$b5e257d569688ac6$var$SSRContext","$73SJx$react","createContext","$b5e257d569688ac6$var$IsSSRContext","$b5e257d569688ac6$var$LegacySSRProvider","props","cur","$73SJx$useContext","counter","$b5e257d569688ac6$var$useCounter","_ref","$73SJx$useState","_ref2","_slicedToArray","isSSR","setIsSSR","value","$73SJx$useMemo","concat","document","$73SJx$useLayoutEffect","createElement","Provider","children","$b5e257d569688ac6$var$warnedAboutSSRProvider","$b5e257d569688ac6$export$9f8ac96af4b1b2ae","process","env","NODE_ENV","console","warn","Fragment","$b5e257d569688ac6$var$canUseDOM","Boolean","window","$b5e257d569688ac6$var$componentIds","WeakMap","isDisabled","arguments","length","undefined","ctx","ref","$73SJx$useRef","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner","currentOwner","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","prevComponentValue","get","set","id","state","memoizedState","delete","$b5e257d569688ac6$var$useLegacySSRSafeId","defaultId","$b5e257d569688ac6$var$useModernSSRSafeId","useId","_ref3","$b5e257d569688ac6$export$535bd6ca7f90a273","_ref4","didSSR","$b5e257d569688ac6$export$619500959fc48b26","$b5e257d569688ac6$var$getSnapshot","$b5e257d569688ac6$var$getServerSnapshot","$b5e257d569688ac6$var$subscribe","onStoreChange"],"sources":["G:\\shaankichai\\packages\\@react-aria\\ssr\\src\\index.ts","G:\\shaankichai\\packages\\@react-aria\\ssr\\src\\SSRProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {SSRProvider, useSSRSafeId, useIsSSR} from './SSRProvider';\nexport type {SSRProviderProps} from './SSRProvider';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\nconst IsSSRContext = React.createContext(false);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n// This is only used in React < 18.\nfunction LegacySSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let counter = useCounter(cur === defaultContext);\n  let [isSSR, setIsSSR] = useState(true);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${counter}`,\n    current: 0\n  }), [cur, counter]);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof document !== 'undefined') {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return (\n    <SSRContext.Provider value={value}>\n      <IsSSRContext.Provider value={isSSR}>\n        {props.children}\n      </IsSSRContext.Provider>\n    </SSRContext.Provider>\n  );\n}\n\nlet warnedAboutSSRProvider = false;\n\n/**\n * When using SSR with React Aria in React 16 or 17, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  if (typeof React['useId'] === 'function') {\n    if (process.env.NODE_ENV !== 'test' && !warnedAboutSSRProvider) {\n      console.warn('In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.');\n      warnedAboutSSRProvider = true;\n    }\n    return <>{props.children}</>;\n  }\n  return <LegacySSRProvider {...props} />;\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet componentIds = new WeakMap();\n\nfunction useCounter(isDisabled = false) {\n  let ctx = useContext(SSRContext);\n  let ref = useRef<number | null>(null);\n  // eslint-disable-next-line rulesdir/pure-render\n  if (ref.current === null && !isDisabled) {\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    let currentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentOwner?.current;\n    if (currentOwner) {\n      let prevComponentValue = componentIds.get(currentOwner);\n      if (prevComponentValue == null) {\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });\n      } else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        componentIds.delete(currentOwner);\n      }\n    }\n\n    // eslint-disable-next-line rulesdir/pure-render\n    ref.current = ++ctx.current;\n  }\n\n  // eslint-disable-next-line rulesdir/pure-render\n  return ref.current;\n}\n\nfunction useLegacySSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  let counter = useCounter(!!defaultId);\n  let prefix = ctx === defaultContext && process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${ctx.prefix}`;\n  return defaultId || `${prefix}-${counter}`;\n}\n\nfunction useModernSSRSafeId(defaultId?: string): string {\n  // @ts-ignore\n  let id = React.useId();\n  let [didSSR] = useState(useIsSSR());\n  let prefix = didSSR || process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${defaultContext.prefix}`;\n  return defaultId || `${prefix}-${id}`;\n}\n\n// Use React.useId in React 18 if available, otherwise fall back to our old implementation.\n/** @private */\nexport const useSSRSafeId = typeof React['useId'] === 'function' ? useModernSSRSafeId : useLegacySSRSafeId;\n\nfunction getSnapshot() {\n  return false;\n}\n\nfunction getServerSnapshot() {\n  return true;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction subscribe(onStoreChange: () => void): () => void {\n  // noop\n  return () => {};\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n  if (typeof React['useSyncExternalStore'] === 'function') {\n    return React['useSyncExternalStore'](subscribe, getSnapshot, getServerSnapshot);\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useContext(IsSSRContext);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}